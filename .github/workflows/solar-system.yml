name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: "mongodb+srv://supercluster.d83jj.mongodb.net/superData"
  MONGO_USERNAME: "superuser"
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:     
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
            - 27017:27017
        env:
          MONGO_URI: "mongodb://localhost:27017/superData"
          MONGO_USERNAME: "non-prod-user"
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD_NON_PROD }}
        strategy:
          matrix:
            nodejs_version: 
              - 19
              - 20
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}
    
        - name: Cache NPM
          uses: actions/cache@v4
          with:
            path: "node_modules"
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          id: unit-test
          run: npm test
          if: success()

        - name: Check Test Resulr
          run: ls -a
          if: failure() && steps.unit-test.outcome == 'failure' || steps.unit-test.outcome == 'success'
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result-${{ strategy.job-index }}
            path: test-results.xml

    code-coverage:
        name: Code Coverage
        runs-on: ubuntu-latest
        container:
          image: node:20
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options:
              --name solar_mongo
        env:
          MONGO_URI: "mongodb://solar_mongo:27017/superData"
          MONGO_USERNAME: "non-prod-user"
          MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD_NON_PROD }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        ## No Longer required as now running job in a node container
        # - name: Setup NodeJS Version - 20
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 20
    
        - name: Cache NPM
          uses: actions/cache@v4
          with:
            path: "node_modules"
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: Install Dependencies
          run: npm install
    
        - name: Code Coverage
          run: npm run coverage
          continue-on-error: true

        - name: Check Coverage Result
          run: ls -a
          if: always()
          
        - name: Archive Code Coverage Result
          uses: actions/upload-artifact@v4
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5
        
    docker: 
      name: Containerization
      permissions:
        packages: write
      env: 
        DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
        GITHUB_USER: ${{ github.repository_owner }}
      needs: 
      - unit-testing
      - code-coverage
      runs-on: ubuntu-latest
      steps:
      - name: Downcase REPO
        id: lowercase-repo
        run: |
          echo "github_repo=${GITHUB_REPOSITORY@L}" >> "${GITHUB_OUTPUT}"

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dockerhub Login
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Github Container Registry Login - GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ steps.lowercase-repo.outputs.github_repo }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker images
        uses: docker/build-push-action@v6.10.0
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }},${{ vars.DOCKERHUB_USERNAME }}/solar-system:latest

      - name: Container Registry Push
        uses: docker/build-push-action@v6.10.0
        env: 
          GHCR_REPO: ghcr.io/${{ steps.lowercase-repo.outputs.github_repo }}
        with:
          context: .
          push: true
          tags: |
            "${{ env.GHCR_REPO }}:${{ github.sha }}","${{ env.GHCR_REPO }}:latest"

    dev-deploy:
      name: Development Deployment
      runs-on: ubuntu-latest
      needs:
        - docker
      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Kubectl installer
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.31.0'

      ## Using Azure K8s Set Context
      # - name: Kubectl Configuration
      #   env:
      #     KUBE_SERVER: ${{ secrets.K8S_SERVER_IP }}
      #   uses: azure/k8s-set-context@v1
      #   with:
      #     method: kubeconfig
      #     kubeconfig: ${{ secrets.KUBE_CONFIG }}

      ## Manually setting up kubeconfig
      - name: Kubectl Configuration
        env:
          KUBE_SERVER: ${{ secrets.K8S_SERVER_IP }}
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig
          sed -i "s|\${KUBE_SERVER}|$KUBE_SERVER|g" kubeconfig
          mkdir -p ~/.kube
          mv kubeconfig ~/.kube/config

      - name: Fetch K8s Details
        run: |
          kubectl version
          echo '===================='
          kubectl get nodes
